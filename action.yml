name: Delete Old GitHub Assets
description: "Deletes old releases, tags, and workflow runs, keeping the latest release."

inputs:
  keep_latest:
    description: "Number of latest assets to keep."
    required: true
    default: "1"

runs:
  using: "composite"
  steps:
    - name: Delete Old Releases
      shell: pwsh
      run: |
        Write-Host "Starting releases cleanup..."
        Write-Host "Fetching all releases..."
        $currentReleaseTag = "${{ github.run_number }}"
        Write-Host "Current release tag: $currentReleaseTag"
        $releases = gh api repos/${{ github.repository }}/releases --paginate -q '.[] | [.id, .tag_name] | @tsv'
        
        if (-not $releases) {
            Write-Host "No releases found to delete. Skipping release cleanup."
        } else {
            Write-Host "Found releases. Starting deletion..."
            $releases | ConvertFrom-Csv -Delimiter "`t" -Header "Id", "TagName" | ForEach-Object {
                if ($_.TagName -ne $currentReleaseTag) {
                    Write-Host "Deleting release: $($_.TagName) (ID: $($_.Id))"
                    try {
                        gh api repos/${{ github.repository }}/releases/$($_.Id) -X DELETE
                        Write-Host "Successfully deleted release: $($_.TagName)"
                    } catch {
                        Write-Host "Failed to delete release: $($_.TagName)"
                    }
                } else {
                    Write-Host "Skipping current release: $($_.TagName)"
                }
            }
        }
        Write-Host "Release cleanup completed."

    - name: Wait for tag deletion to propagate
      shell: bash
      run: sleep 5

    - name: Delete Old Tags
      shell: pwsh
      run: |
        Write-Host "Starting tags cleanup..."
        Write-Host "Fetching all tags..."
        $currentReleaseTag = "${{ github.run_number }}"
        
        # Execute the gh command and capture its output and exit code
        $output = gh api repos/${{ github.repository }}/git/refs/tags --paginate -q '.[].ref | startswith("refs/tags/") | .ref' 2>&1
        $success = $?
        
        # Check if the command was successful and returned any tags
        if (-not $success -or [string]::IsNullOrWhiteSpace($output)) {
            Write-Host "No tags found or error occurred when fetching tags. Skipping tag cleanup."
            exit 0  # Exit with success code
        }
        
        # Process tags only if they exist
        $tags = $output | ForEach-Object { $_ -replace 'refs/tags/', '' }
        
        if (-not $tags -or @($tags).Count -eq 0) {
            Write-Host "No tags found to delete. Skipping tag cleanup."
            exit 0
        }
        
        Write-Host "Found tags. Starting deletion..."
        foreach ($tag in $tags) {
            if ($tag -ne $currentReleaseTag) {
            Write-Host "Deleting tag: $tag"
            try {
                $deleteResult = gh api repos/${{ github.repository }}/git/refs/tags/$tag -X DELETE 2>&1
                $deleteSuccess = $?
                
                if ($deleteSuccess) {
                Write-Host "Successfully deleted tag: $tag"
                } else {
                Write-Host "Failed to delete tag: $tag - $deleteResult"
                }
            } catch {
                Write-Host "Error deleting tag: $tag - $_"
            }
            } else {
            Write-Host "Skipping current tag: $tag"
            }
        }
        
        Write-Host "Tag cleanup completed."

    - name: Delete Workflow Runs
      shell: pwsh
      run: |
        Write-Host "Starting workflow runs cleanup..."
        Write-Host "Fetching all workflow runs..."
        $currentRunId = $env:GITHUB_RUN_ID
        Write-Host "Current running workflow ID: $currentRunId"
        
        try {
            # Execute the gh command and capture its output and exit code
            $output = gh api repos/${{ github.repository }}/actions/runs --paginate -q '.workflow_runs[] | select(.id) | .id' 2>&1
            $success = $?
            
            # Check if the command was successful
            if (-not $success) {
                Write-Host "Error occurred when fetching workflow runs: $output"
                Write-Host "Skipping workflow cleanup."
                exit 0
            }
            
            # Check if we got any workflow runs
            if ([string]::IsNullOrWhiteSpace($output)) {
                Write-Host "No workflow runs found to delete. Skipping workflow cleanup."
                exit 0
            }
            
            # Convert output to array and filter out empty entries
            $workflowRuns = $output | Where-Object { -not [string]::IsNullOrWhiteSpace($_) }
            
            if (-not $workflowRuns -or @($workflowRuns).Count -eq 0) {
                Write-Host "No workflow runs found to delete. Skipping workflow cleanup."
                exit 0
            }
            
            Write-Host "Found $(@($workflowRuns).Count) workflow runs. Starting deletion..."
            
            foreach ($runId in $workflowRuns) {
                if ($runId -ne $currentRunId) {
                    Write-Host "Deleting workflow run ID: $runId"
                    try {
                        $deleteResult = gh api repos/${{ github.repository }}/actions/runs/$runId -X DELETE 2>&1
                        $deleteSuccess = $?
                        
                        if ($deleteSuccess) {
                            Write-Host "Successfully deleted workflow run: $runId"
                        } else {
                            Write-Host "Failed to delete workflow run: $runId - $deleteResult"
                        }
                    } catch {
                        Write-Host "Error deleting workflow run: $runId - $_"
                    }
                } else {
                    Write-Host "Skipping current workflow run: $runId"
                }
            }
            Write-Host "Workflow cleanup completed. Only the current run is preserved."
            
        } catch {
            Write-Host "Unexpected error during workflow cleanup: $_"
            Write-Host "Skipping workflow cleanup."
            exit 0
        }